// schema.prisma

datasource db {
  provider = "postgresql" // Replace with your preferred database
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  CUSTOMER
  HOST
  ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  AUTHORIZED
  CAPTURED
  CANCELLED
}

model User {
  id        Int           @id @default(autoincrement())
  email     String        @unique
  password  String
  name      String
  phone     String?
  role      Role          @default(CUSTOMER)
  listings  BaseListing[] @relation("HostListings")
  bookings  Booking[]     @relation("UserBookings")
  photos    Photo[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model BaseListing {
  id                   Int                     @id @default(autoincrement())
  title                String
  description          String?
  host                 User?                   @relation("HostListings", fields: [hostId], references: [id])
  hostId               Int?
  // Add address fields directly to BaseListing
  street               String
  city                 String
  state                String
  zipCode              String
  country              String
  countryCode          String?
  plusCode             String?
  latitude             Float?
  longitude            Float?
  photos               Photo[]
  createdAt            DateTime                @default(now())
  updatedAt            DateTime?               @updatedAt
  photoUrl             String
  source               String?
  // Relations to specific listing types
  UnregisteredFacility UnregisteredFacility?
  RegisteredFacility   RegisteredFacility?
  PeerToPeerFacility   PeerToPeerFacility?

  // Relation to categories (optional)
  categories           Category[]              @relation("ListingCategories")
}

model UnregisteredFacility {
  id                      Int                  @id @default(autoincrement())
  baseListing             BaseListing          @relation(fields: [baseListingId], references: [id])
  baseListingId           Int                  @unique
  website                 String?
  phone                   String?
  placeId                 String?
  url                     String?
  temporarilyClosed       Boolean?             @default(false)
  permanentlyClosed       Boolean?             @default(false)
  rank                    Int?
  reviewsCount            Int?
  totalScore              Float?
  wheelChairAccessibility Json?
  openingHours            Json?
  categories              Json?

  // Relation to opening hours (optional)
  openingHourEntries      OpeningHour[]
}

model RegisteredFacility {
  id            Int           @id @default(autoincrement())
  baseListing   BaseListing   @relation(fields: [baseListingId], references: [id])
  baseListingId Int           @unique
  units         ListingUnit[]
}

model PeerToPeerFacility {
  id             Int           @id @default(autoincrement())
  baseListing    BaseListing   @relation(fields: [baseListingId], references: [id])
  baseListingId  Int           @unique
  units          ListingUnit[]
  additionalInfo Json?
}

model ListingUnit {
  id                   Int                  @id @default(autoincrement())
  size                 String
  price                Float
  available            Boolean              @default(true)
  bookings             Booking[]
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt

  // Relations to specific facility types
  registeredFacility   RegisteredFacility?  @relation(fields: [registeredFacilityId], references: [id])
  registeredFacilityId Int?

  peerToPeerFacility   PeerToPeerFacility?  @relation(fields: [peerToPeerFacilityId], references: [id])
  peerToPeerFacilityId Int?
}

model Booking {
  id         Int           @id @default(autoincrement())
  user       User          @relation("UserBookings", fields: [userId], references: [id])
  userId     Int
  unit       ListingUnit   @relation(fields: [unitId], references: [id])
  unitId     Int
  startDate  DateTime
  endDate    DateTime
  status     BookingStatus @default(PENDING)
  payment    Payment?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
}

model Payment {
  id              Int           @id @default(autoincrement())
  amount          Float
  status          PaymentStatus @default(PENDING)
  bookingId       Int           @unique
  booking         Booking       @relation(fields: [bookingId], references: [id])
  stripePaymentId String?       // Reference to Stripe payment intent
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Category {
  id           Int           @id @default(autoincrement())
  name         String
  baseListings BaseListing[] @relation("ListingCategories")
}

model OpeningHour {
  id                     Int                     @id @default(autoincrement())
  day                    String
  hours                  String
  unregisteredFacility   UnregisteredFacility    @relation(fields: [unregisteredFacilityId], references: [id])
  unregisteredFacilityId Int
}

model Photo {
  id            Int          @id @default(autoincrement())
  url           String
  category      String?
  baseListing   BaseListing? @relation(fields: [baseListingId], references: [id])
  baseListingId Int?
  user          User?        @relation(fields: [userId], references: [id])
  userId        Int?
  createdAt     DateTime     @default(now())
}
